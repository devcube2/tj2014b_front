부사수 못해( 화내 --> 나가 ) -> 그 업무 본인( 화나고 --> 나감 )

- 기한(과제 3시간 시도 --> 옆사람 --> 공유 --> 3시간 시도 --> 강사/팀장/윗사람)
    - 사원 , 대리 , 팀장
    - 사원 못하는 말 닫고 ( 나가세요. ) / 할사람 해
    - 사원이 못해도 찾아볼려고 하는 노력 / 못하는걸 사수에게 미안하지만 전달 알려고 하는 태도 ( 같이 해보자. )
    - 마음이 편해야 코드 잘 쳐

[ 비대면 국기 / 수업 ]
    - 의지 떨어짐 -

[ 취업(여러분 300만원 받는 사람) 목표 ]

[ 자기주도 개발 방향 6개월 ]   

[ 국비 출신 개발자 ]
    - 사회적인 측면 *부정적 이미지*
    - 1. 그냥 출결만 80% 수료 , 강사
    - 2. 버스타 -- 포트폴리오
    ----> 혼자 업무 못해.. 왜?? 학원에서 이거 하세요. 저거 하세요.
    ----> 회사 알아서 해 ----> 국비 출신 회사 5년 버티기 힘들어함.
    ----> 취업 문제 X , 취업 이후 O , 국비 출신 못해서 안뽑
    ----> 1. 자기주도학습(6개월 해도 안되는 분)

[ 신입 개발자 ] 포화 --> 지원 300 ~ 400 ( 반/그냥/학교/국비) 50% 100/200 
- 1. 중소기업(대표) 300 ~ 400 , 서류 ( 4년제 미만 , 전공 이하 , 자격증 이하 )
- 2. 포트폴리오(PR) 특색 / 아이디어
- 3. 기술 면접 / 테스트 ( ) , 면접학원
     ----> 전공생 분들이 취업 잘한다..(X) , 코드 화려하거나 어려운 기술 취업 잘한다..(X)
     ----> 기준 : 꼼꼼하거나 , 책임감 , 말(소통)
     ----> 코딩 실력( 수업/학교 아무리 잘쳐야 거기서 거기.. )
     ----> 알 깨기 

[ 학원에서 강의 내용이 프로그래밍 언어 ]
[ 언어 ]
    - 영어 학원 , 사람( 영어학습 ) - 말
        - 한국인(한국어) ---- 번역(컴파일/인터프리터) ---- 미국인(영어)
        - 영어문법/암기 - 규칙
        - 한국어문법( 문자 ) /암기 - 규칙
        - 페트음료( 분리수거 : 페트 )
        - A4종이 ( 분리수거 : 종이 )
        - 음식물 ( 분리수거 : 음식물쓰레기 )
    - 컴퓨터 학원 , 사람( 컴퓨터 언어 ) - 말
        - 사람(HTML/CSS/JS언어) ---- 번역(컴파일/인터프리터/브라우저) ---- 컴퓨터(기계어)
        - HTML/CSS/JS문법/암기 - 규칙
    - HTML/CSS/JS/JSP/JQUERY/JAVA/DB/SPRING/MYBATIES/REACT ~~

    - 분리수거 왜 하죠??? 재사용시 분류가 되었기 때문에( 재사용 효율성 좋다. )
    - 분리수거 안하면 ?? 재사용시 쓰레기 분류하기 어렵다.( 재사용 효율성 떨어짐 )

[ 웹 프로그래밍 언어 ]
    - HTML(문자) : 하이퍼텍스트 마크업 언어              = 뻐대
    - CSS(문자) : 캐스캐스팅 스타일 시트                 = 옷     --> HTML 없이 독단적으로 실행 불가능
    - JS(문자, 숫자, 불리언, 객체) : 자바 스크립트 언어   = 행동   --> HTML 없이 독단적으로 실행 불가능
        HTML( CSS포함 , JS 포함 )

[ JS ]
    - 2009년 이후 node.js 나오면서 백엔드 역활 가능해졌다. 인기 상승
    1. 웹 프로그래밍( HTML,CSS,JS )
    2. 웹 서버( node.js )
    3. 앱 ( REACT.JS NATIVE )
    4. 소프트웨어 ( NW>JS )
        ---> 스타트업 ( 소규모 프로젝트 )

[ JS 적용하는 방법 ]
    1. <body> 마크업 안에서 <script> 마크업 사용
        <script>
            JS코드 작성
        </script>
    2. JS파일 생성하여 HTML 에서 임포트(불러오기) 사용
        <head> 마크업 안에서 <script src="JS파일경로">

[ JS 주석 ]
    1. /* 여러줄 주석 */
    2. // 한줄 주석

[ 리터럴 ]
    - 키보드로부터 직접 입력한 값 그 자체

[ 변수 ]
    - 하나의 자료/데이터를 저장하는 메모리 공간
    1. 변수 만들기
        1. let
        2. 변수명
        3. =
        4. 리터럴/값
        let 변수명 = 리터럴
    2. 변수의 값 호출
        변수명
    3. 변수의 값 수정
        변수명 = 새로운 값
    4. 변수의 연산
        let 변수명A = 변수명B * 10
    5. 변수의 초기화 , 변수가 생성될때 처음에 대입되는 범위/작업
        1. let 변수명 = 리터럴;
        2. let 변수명;         <!-- undefined(값이 없다.) -->

[ 배열 ]
    1. 순서대로 번호가 붙인 원소 들이 연속적인 형태로 구성된 데이터 타입
    2. 인덱스? 순서대로 배정된 번호 , 0번 시작 , 길이/총개수 : 3개 이면 인덱스 0 1 2 (n-1)
    3. 배열 선언 : [ ] 대괄호 / ,(쉼표)를 이용한 값을 구분하여 열거 한다.
        let 변수명 = [ 값1 , 값2, 값3 ]
    4. 배열전체 호출 : 배열변수명
    5. 배열내 특정한 위치의 요소(값) 호출 : 배열변수명[인덱스]
    6. 배열수정
        - 전체 수정 : 배열변수명 = [새로운배열]
        - 특정한 위치의 요소(값) 수정 : 배열변수명[인덱스] = 새로운값
    7. 배열내 요소 추가 : 
        .push( 새로운값 ) 
        .splice( 삽입할인덱스 , 0 , 새로운값 )
    8. 배열내 요소 삭제 :
        .splice( 삭제할인덱스 , 삭제개수 )
    9. 배열내 요소 찾기 :
        .indexOf( 찾을데이터 ) , 배열내 찾을데이터가 존재하면 인덱스반환 없으면 -1 반환

[ 문자열 ]
    1. " " vs ' ' vs ` ` 으로 감싼 자료의 타입
    2. 이스케이프/제어 문자
        - \n 줄바꿈 , \t 들여쓰기 , \" 큰따옴표출력 , \' 작은따옴표출력 , \\ 백슬래시출력
    3. `백틱 템플릿` : 문자열 사이에 변수호출과 연산을 연결하는 문자열 구조
        `문자열A ${ 변수호출 }  ${ 연산 } ${ 함수호출 } 문자열B`

[ 연산자 ]
    1. 산술연산자 : +더하기 -빼기 *곱하기 /나누기 %나머지
    2. 연결연산자 : +연결
    3. 비교연산자 : >초과 <미만 >=이상 <=이하 ==같다 !=같지않다 ===(값/타입)같다 !==(값/타입)다르다
    4. 관계연산자 : &&이면서 ||이거나 !부정적
    5. (복합)대입연산자 : =대입 += -= *= /= %=
    6. 증감연산자 : 변수++ , ++변수 , 변수-- , --변수
    7. 삼항연산자 : 조건문 ? 참 : 거짓

[ 함수 ]
    - 함(상자) 수(숫자) : 상자 안에 들어있는 수 -> 미리 상자에 넣어둔 수 -> 미리 상자에 넣어둔 코드들
    - JS회사에 미리 만든 코드들을 일반 개발자들에게 편리하게 기능을 제공하는 미리 만든 키워드들
    - 매개변수(인자값/들어가는값) 와 반환(결과값/나오는값)
    - 라이브러리(함수의집합)
    1. 미리 명령어(코드)들을 정의하는 구조
    2. 함수 사용 종류
        1. 라이브러리 : 내가 아닌 다른 사람이 만든 함수들 , console.log() , document.querySelector() 등등
        2. 정의함수 : 내가 만든 함수들 , 비지니스로직 함수
    3. JS 함수 종류
        1. 선언적함수 : function 함수명(){}
        2. 익명함수 : function(){} , let 변수 = function(){}
        3. *화살표(람다) 함수* : ( ) -> { } , let 변수 = ( ) => { }
    4. 선언적함수 만드는 방법
        1. function     : 함수를 만들기 위한 함수 선언 키워드
        2. 함수명       : 관례적으로 카멜표기법( mycar -> myCar , studentscorelist -> studentScoreList )
        3. ( 매개변수1 , 매개변수2 ) : 매개(중매 매)변수 , 함수 호출시 인자값을 매개변수에 대입받는 변수
        4. { }          : 함수 호출/실행 시 실행 되는 코드들
        5. return       : 함수가 종료되면서 호출 했던곳으로 반환 값 , 무조건 1개 자료
    5. 함수 호출하는 방법
        1. js 에서 호출 하는 방법   : 함수명( 인자값1 , 인자값2 ) , let 리턴값 = 함수명( 인자값1 , 인자값2 )
        2. html 에서 호출 하는 방법 : <마크업 onclick="함수명( 인자값1 , 인자값2 )">
    6. 함수 사용 특징
        1. 코드(명령어) 재 활용/사용 , 동일한 코드를 여러번 사용시 효율성이 좋다.
        2. 미리 정의된 코드의 인자값(매개변수)에 따른 서로 다른 결과(리턴값) 얻을수 있다.
        3. 지역변수 : 함수가 선언된 변수는 실행도중에만 메모리 할당되고 함수가 종료되면 지역변수 초기화
    7. html 마크업 이벤트 속성값
        - <마크업 snXXXX="js코드">
        1. onclick : 마크업을 클릭했을때 실행되는 js코드




[ 입출력 함수 ]
1. console.log( )       : 정의:[console]탭 출력 하는 함수 / 매개변수 : 출력할 데이터 / 반환값 : x
2. document.write( )    : 정의:HTML body마크업 출력 하는 함수 / 매개변수 : 출력할 데이터 / 반환값 : x
3. prompt( )            : 정의:HTML 알람창으로 부터 입력받은 함수 / 매개변수 : 알람 메시지 / 반환값 : (String)입력받은 값
4. document.querySelector( ) : 정의 : HTML 마크업들을 DOM객체 호출하는 함수 / 매개변수 : 선택자 / 반환값 :
    - document.querySelector( "마크업명" ) : 지정한 마크업의 DOM객체를 반환
    - document.querySelector( ".클래스명" ) : 지정한 class 속성을 가진 마크업의 DOM객체를 반환
    - document.querySelector( "#아이디명" ) : 지정한 id 속성을 가진 마크업의 DOM객체를 반환
    - D(document) O(object) M(model) 객체 : HTML 마크업들을 객체 처럼 사용할수 있는 모델
        기능제공
        .value : 마크업의 value 속성값을 호출/대입 , value 갖는 마크업 : <input>, <select>, <textarea>
        .innerHTML : 마크업 사이에 있는 HTML 를 호출/대입 , <input /> <img /> <br /> 등 를 제외 모두 가능. 주로 <div> <span> <table>
[ 타입 변환 함수 ]
1. Number( )            : 정의: 숫자타입으로 변환 함수 / 매개변수 : 반환할 데이터 / 반환값 : 반환된 숫자데이터
2. String( )            : 정의: 문자열타입으로 변환 함수 / 매개변수 : 반환할 데이터 / 반환값 : 반환된 문자열데이터
3. parseInt( )          : 정의: 정수타입으로 변환 함수 / 매개변수 : 반환할 데이터 / 반환값 : 반환된 정수데이터

[ 날짜/시간 함수 ]
    1. let nowDate = new Date()     : 현재 시스템(컴퓨터)의 날짜와 시간을 반환 해주는 객체 생성
        2024-11-28 12:35:25
    2. Data객체 함수
        nowData.getFullYear()       : 현재 날짜의 연도 반환 , 2024
        nowData.getMonth()          : 현재 날짜의 월(0:1월 11:12월) 반환 , 10(11월) , +1
        nowData.getDate()           : 현재 날짜의 일 반환 , 28
        nowData.getHours()          : 현재 날짜의 시 반환 , 12
        nowData.getMinutes()        : 현재 날짜의 분 반환 , 28
        nowData.getSeconds()        : 현재 날짜의 초 반환 , 25
    3. 주의할점 : 월과 일이 한자리수 이면 한자리수로 반환 , 두자리수 로 맞춤
        nowDate.getMonth()+1 < 10 ? "0"+(nowDate.getMonth()+1) : nowDate.getMonth()+1        

[ 조건문 ]
    - 조건결과 에 따른 흐름 제어 , 컴퓨터가 논리(상황에 따른 판단력)적인 사고력을 넣어준다.
    - 예] 내가 돈이 10000원이 있으면 택시를 탄다. 아니면 걸어간다.
    - 예] if( 돈>=10000 ) { 택시를탄다; }else{ 걸어간다; }
